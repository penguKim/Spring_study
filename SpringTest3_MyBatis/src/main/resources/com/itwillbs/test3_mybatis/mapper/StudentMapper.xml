<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
마이바티스에서 실행할 SQL 구문을 갖는 xxxMapper.xml 파일 정의
=> 실행할 각 구문의 이름을 태그로 제공함(insert, update, delete, select 등)
   (내부적으로 PreparedStatement 객체를 통해 SQL 구문을 실행함)
=> 주의! mapper 태그 내의 namespace 속성에 현재 XML 파일과 연결될 자바 인터페이스를 명시해야한다!
   ex) <mapper namespace="패키지명.인터페이스명">
   (존재하지 않는 인터페이스(오타 등)라도 오류가 표시되지 않음)
=> 주의! 각 태그 내의 id 속성에 지정될 이름은 Mapper 인터페이스 내의 메서드명과 일치해야한다!
 -->

<!-- 실제 구문 실행 시 매퍼 패키지의 인터페이스가 없다면(이름이 틀릴 경우 포함) 오류가 발생한다. -->
<mapper namespace="com.itwillbs.test3_mybatis.mapper.StudentMapper">

	<!--
	[ insert 태그 기본 문법 ]
	<insert id="xxx">
		실행할 INSERT 구문...
	</insert>
	=> 단, 자바의 JDBC PreparedStatement 객체 사용 시 파라미터를 만능문자(?)로 처리했으나
	   마이바티스에서는 #{파라미터명} 으로 데이터를 표시(별도의 치환과정 불필요)
	   이 때, 사용될 데이터(파라미터)는 반드시 Mapper 인터페이스에서 메서드 내의 파라미터로 지정되어야한다!
	=> Mapper 인터페이스에서 메서드 파라미터로 전달한 객체(XXXVO 등)가 존재할 경우
	   해당 객체 내의 멤버변수명을 파라미터명으로 직접 접근 가능(멤버변수명 정확히 지정 필수!)
	   (#{xxx.멤버변수명} 대신 #{멤버변수명} 만으로 지정 가능 => 단일 파라미터일 때)
	   단, 전달된 파라미터가 복수개일 경우 파라미터명 구분해야함! (#{xxx.멤버변수명} 필수!)
	   ex) StudentVO 객체의 name 변수 값을 파라미터로 지정 시
	       기존 DAO 클래스에서는 student.getName() 메서드를 호출하여 값을 전달받았지만
	       마이바티스에서는 #{name} 형식으로 접근 가능하다!
	=> 만약, 단일 파라미터로 VO 객체가 아닌 일반 변수를 전달했을 경우
	   변수명을 파라미터명으로 그대로 사용 
	   ex) int insertStudent(String name); 일 때 #{name} 형식으로 사용
	=> 문자열과 비문자열 데이터 구별없이 #{} 형식으로 파라미터 전달하면
	   자동으로 문자열 타입 감지하여 ""('') 기호까지 붙여준다! (pstmt.setString() 메서드 역할)
	=> INSERT, UPDATE, DELETE 태그를 통해 SQL 구문 실행 후에는 자동으로 int 타입 결과값이 리턴됨
	   (PreparedStatement 객체의 executeUpdate() 메서드와 동일)
	=> SQL 구문 작성 시 한 줄 주석은 다음 두 가지 방법 중 한 가지 사용
	   1) 일반 HTML 주석과 동일한 주석을 사용(SQL 구문에 포함되지 않음. 로그에 보이지 않음)
	   2) '-' 기호 2개와 공백 1개를 조합하여 해당 기호 뒤에 주석문을 작성(로그에 표시됨)
	-->
	<!-- 학생 정보 등록 - INSERT -->
	<!-- INSERT INTO xxx VALUES (null, ?, ?, ?) -->
	<!-- 구문 실행 후 자동으로 int 타입 결과값 리턴됨 -->
	<insert id="insertStudent">
		INSERT INTO student
		VALUES (
			null     -- AUTO_INCREMENT 컬럼이므로 null 값 전달 시 자동 증가
			, #{name} -- student.name 대신 name(변수명)만 지정
			, #{email} -- student.email 대신 email(변수명)만 지정
			, #{grade} -- student.grade 대신 grade(변수명)만 지정
		)
	</insert>
	<!--
	[ select 태그 기본 문법 ]
	<select id="xxx" resultType="조회된 결과가 저장되어 리턴될 타입">
		실행할 구문...
	</select>
	=> resultType 속성에 기술하는 결과 타입은
	   SELECT 구문을 실행했을 때 기대되는 조회 결과를 저장하여 리턴하기 위한 데이터타입 명시
	   (이 때, 해당 변수명과 데이터베이스 테이블의 컬럼명이 일치하는 값만 저장됨)
	   (만약, 해당 데이터를 객체에 저장 시 객체 생성도 자동으로 수행)
	   (객체가 복수개일 경우 List 객체 등도 자동으로 생성)
	=> 단일 항목의 기본 데이터일 경우 기본 데이터타입(int 등)을 명시하면 되고,
	   복수개의 항목 데이터일 경우 해당 데이터가 묶음으로 관리될 객체 타입을 명시하면 된다!
	   ex) StudentVO 타입, HashMap 타입 등
	=> 단, 사용자 정의 클래스 타입 지정 시 패키지명까지 함께 지정
	   (Alias 기능을 통해 경로명을 생략할 수도 있다!)
	-->
	<!-- 학생 상세정보 조회 - SELECT -->
	<!-- SELECT * FROM student WHERE idx = ? -->
	<!-- 조회 결과를 StudentVO 타입으로 관리할 예정이므로 resultType 을 StudentVO 타입 지정(패키지명 포함) -->
	<!-- VO 클래스 미사용 시 Map 타입(HashMap 타입) 사용 가능 => hashmap 지정 -->
	<select id="selectStudent" resultType="com.itwillbs.test3_mybatis.vo.StudentVO">
		SELECT *
		FROM student
		WHERE idx = #{idx}
	</select>
	<!-- 조회 결과(학생 1명의 레코드)를 StudentVO 객체 생성 및 자동 저장 후 리턴 -->
	
	
	<!-- 학생 목록 조회 - SELECT -->
	<!-- SELECT * FROM student -->
	<!-- 
	조회 결과가 단일 레코드일 경우 해당 레코드 저장이 가능한 VO 타입 또는 HashMap 타입을 resultType 속성에 지정
	만약, 조회 결과가 복수개 레코드이더라도 단일 레코드 저장이 가능한 타입 지정 시
	해당 객체에 1개 레코드를 저장하고, 해당 객체들을 묶어서 다시 List 타입 객체에 자동으로 저장
	ex) 1개 학생 정보가 StudentVO 객체에 저장되고, 전체가 List 객체에 저장되므로
	    List 타입의 제네릭 타입으로 지정할 StudentVO 타입을 resultType 으로 지정
	-->
	<select id="selectStudentList" resultType="com.itwillbs.test3_mybatis.vo.StudentVO">
		SELECT * FROM student
	</select>
	
	<!-- 학생 정보 수정 - UPDATE -->
	<!-- 번호(idx)에 해당하는 레코드의 이름, 이메일, 학년을 전달받은 값으로 수정 -->
	<!-- UPDATE student SET name = ?, email = ?, grade = ? WHERE idx = ? -->
	<update id="updateStudent">
		UPDATE student
		SET name = #{name}
			, email = #{email}
			, grade = #{grade}
		WHERE idx = #{idx}
	</update>
	
	<!-- 학생 정보 삭제 - DELETE -->
	<!-- 이름과 이메일이 일치하는 레코드 삭제 -->
	<!-- DELETE FROM student WHERE name = ? AND email = ? -->
	<!-- 파라미터가 Map 타입 객체 1개일 경우 Map 에 저장된 키를 사용하여 직접 접근 : #{키} -->
	<delete id="deleteStudent">
		DELETE FROM student
		WHERE name = #{name}
		AND email = #{email}
	</delete>
</mapper>












